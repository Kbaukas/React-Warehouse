{"version":3,"sources":["components/EditForm.js","components/ProducInTable.js","components/MainWindow.js","App.js","serviceWorker.js","index.js"],"names":["EditForm","props","product","productName","type","weight","color","id","state","hadleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","updateTable","close","prevProps","prevState","console","log","className","onSubmit","onChange","placeholder","Component","ProducInTable","editing","active","handleRemove","showEditForm","closeForm","changeHandler","remove","activate","ean","colSpan","update","index","$oid","checked","onClick","MainWindow","products","JSON","parse","localStorage","getItem","removeRecord","readJason","toggleActive","length","newProduct","PRODUCT_DATA","map","push","uuidv4","Index","setItem","stringify","cuState","filter","editData","updatedProducts","tableHead","th","key","href","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ec5c541.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./css/EditForm.css\";\r\n\r\nclass EditForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // unwraping props\r\n    const { productName, type, weight, color, id } = this.props.product;\r\n    // defining default input values\r\n    this.state = {\r\n      productName: productName,\r\n      type: type,\r\n      weight: weight,\r\n      color: color\r\n    };\r\n    this.hadleChange = this.hadleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  hadleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.updateTable(this.props.product.id, this.state);\r\n    this.props.close();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"Form Update\");\r\n  }\r\n  render() {\r\n    // productName: productName,\r\n    //   ean: ean,\r\n    //     type: type,\r\n    //       weight: weight,\r\n    //         color: color\r\n    return (\r\n      <div className=\"EditForm\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            className=\"input_1\"\r\n            name=\"productName\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Product name\"\r\n            value={this.state.productName}\r\n          />\r\n\r\n          {/* <input\r\n            className=\"input_2\"\r\n            type=\"number\"\r\n            name=\"ean\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"EAN\"\r\n            value={this.state.ean}\r\n          /> */}\r\n\r\n          <input\r\n            className=\"input_3\"\r\n            type=\"text\"\r\n            name=\"type\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Type\"\r\n            value={this.state.type}\r\n          />\r\n\r\n          <input\r\n            className=\"input_4\"\r\n            type=\"number\"\r\n            name=\"weight\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Weight(g)\"\r\n            value={this.state.weight}\r\n          />\r\n\r\n          <input\r\n            className=\"input_5\"\r\n            type=\"text\"\r\n            name=\"color\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Color\"\r\n            value={this.state.color}\r\n          />\r\n\r\n          <button type=\"submit\">Save</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./css/ProducInTable.css\";\r\nimport EditForm from \"./EditForm\";\r\n\r\nclass ProducInTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editing: false,\r\n      active: false,\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.showEditForm = this.showEditForm.bind(this);\r\n    this.closeForm = this.closeForm.bind(this);\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n  }\r\n  // click handler to remove element\r\n\r\n  handleRemove(evt) {\r\n    this.props.remove(this.props.id);\r\n  }\r\n  showEditForm(evt) {\r\n    this.setState({\r\n      editing: !this.state.editing,\r\n    });\r\n  }\r\n  closeForm() {\r\n    this.setState({\r\n      editing: !this.state.editing,\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"Unmount\");\r\n  }\r\n\r\n  changeHandler(evt) {\r\n    this.props.activate(this.props.product.id);\r\n    // this.setState(cuState => ({\r\n    //   [evt.target.name]: !evt.target.checked\r\n    // }));\r\n  }\r\n  render() {\r\n    // getting props from parent element(MainWindow) and unwrapping\r\n\r\n    const {\r\n      productName,\r\n      ean,\r\n      type,\r\n      weight,\r\n      color,\r\n      active,\r\n      id,\r\n    } = this.props.product;\r\n    console.log(productName);\r\n    return this.state.editing ? (\r\n      <tr className=\"ProducInTable\">\r\n        <td className=\"editable\" colSpan=\"9\">\r\n          <EditForm\r\n            close={this.closeForm}\r\n            updateTable={this.props.update}\r\n            product={this.props.product}\r\n          ></EditForm>\r\n        </td>\r\n      </tr>\r\n    ) : (\r\n      // passing props to html <td> elements\r\n      <tr className=\"ProducInTable\">\r\n        <td>{this.props.index}</td>\r\n        <td>{productName}</td>\r\n        <td>{ean.$oid}</td>\r\n        <td>{type}</td>\r\n        <td>{weight}</td>\r\n        <td>{color}</td>\r\n\r\n        <td>\r\n          <input\r\n            type=\"checkbox\"\r\n            name=\"active\"\r\n            checked={active}\r\n            onChange={this.changeHandler}\r\n          />\r\n        </td>\r\n        <td>\r\n          <button className=\"view\">View</button>\r\n        </td>\r\n        <td>\r\n          <button onClick={this.showEditForm} className=\"edit\">\r\n            Edit\r\n          </button>\r\n        </td>\r\n        <td>\r\n          <button className=\"delete\" onClick={this.handleRemove}>\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProducInTable;\r\n","import React, { Component } from \"react\";\r\nimport ProducInTable from \"./ProducInTable\";\r\nimport \"./css/MainWindow.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport PRODUCT_DATA from \"./data/jsonData.json\";\r\nimport EditForm from \"./EditForm\";\r\nclass MainWindow extends Component {\r\n  // *******default props for table Head********\r\n  static defaultProps = {\r\n    tableHead: [\r\n      \"Index\",\r\n      \"Product Name\",\r\n      \"EAN\",\r\n      \"Type\",\r\n      \"Weight(g)\",\r\n      \"Color\",\r\n      \"Active\",\r\n    ],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    //*****Initial state from Json******** */\r\n\r\n    this.state = {\r\n      products: [...JSON.parse(localStorage.getItem(\"products\" || \"[]\"))],\r\n    };\r\n    this.removeRecord = this.removeRecord.bind(this);\r\n    this.readJason = this.readJason.bind(this);\r\n    this.updateTable = this.updateTable.bind(this);\r\n    this.toggleActive = this.toggleActive.bind(this);\r\n  }\r\n  //****function to add unique id to each product  and use this function to initiate state*/\r\n  async componentDidMount() {\r\n    console.log(\"ilgis \" + this.state.products.length);\r\n    if (this.state.products.length === 0) {\r\n      this.readJason();\r\n    }\r\n  }\r\n  readJason() {\r\n    let newProduct = [];\r\n    PRODUCT_DATA.products.map((product, index) => {\r\n      newProduct.push({\r\n        ...product,\r\n        active: false,\r\n        id: uuidv4(),\r\n        Index: index + 1,\r\n      });\r\n    });\r\n\r\n    localStorage.setItem(\"products\", JSON.stringify(newProduct));\r\n    let productsLocal = JSON.parse(localStorage.getItem(\"products\"));\r\n  }\r\n\r\n  //********remove product**** if active is true */\r\n  removeRecord(id) {\r\n    console.log(\"remove\");\r\n    this.setState(\r\n      (cuState) => ({\r\n        products: cuState.products.filter(\r\n          (product) => product.active === false\r\n        ),\r\n      }),\r\n      () =>\r\n        localStorage.setItem(\"products\", JSON.stringify(this.state.products))\r\n    );\r\n    // let products = JSON.parse(localStorage.getItem(\"products\"));\r\n    // let newProducts = products.filter((product) => product.id !== id);\r\n\r\n    // localStorage.setItem(\"products\", JSON.stringify(newProducts));\r\n  }\r\n  // *********Select deselect Active*******\r\n  toggleActive(id) {\r\n    this.setState(\r\n      (cuState) => ({\r\n        products: cuState.products.map((product) =>\r\n          product.id === id ? { ...product, active: !product.active } : product\r\n        ),\r\n      }),\r\n      () =>\r\n        localStorage.setItem(\"products\", JSON.stringify(this.state.products))\r\n    );\r\n  }\r\n  //***** */ updating table  ******\r\n  updateTable(id, editData) {\r\n    // \"Index\",\r\n    // \"Product Name\",\r\n    //   \"EAN\",\r\n    //   \"Type\",\r\n    //   \"Weight\",\r\n    //   \"Color\",\r\n    const { productName, type, weight, color } = editData;\r\n    const updatedProducts = this.state.products.map((product) => {\r\n      if (product.id === id) {\r\n        return {\r\n          ...product,\r\n          productName: productName,\r\n          type: type,\r\n          weight: weight,\r\n          color: color,\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    this.setState({\r\n      products: updatedProducts,\r\n    });\r\n    // *************************\r\n    localStorage.setItem(\"products\", JSON.stringify(updatedProducts));\r\n    let products = JSON.parse(localStorage.getItem(\"products\"));\r\n    console.log(products);\r\n    // ***************************\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MainWindow\">\r\n        <h1>Warehouse Product's Table</h1>\r\n        {/********  genarating table*********** */}\r\n        <table>\r\n          {/* Table head */}\r\n          <thead>\r\n            <tr>\r\n              {this.props.tableHead.map((th) => (\r\n                <th key={uuidv4()}>{th}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          {/* generating table body  */}\r\n          <tbody>\r\n            {this.state.products !== null &&\r\n              this.state.products.map((product, index) => (\r\n                <ProducInTable\r\n                  activate={this.toggleActive}\r\n                  index={index + 1}\r\n                  update={this.updateTable}\r\n                  key={product.id}\r\n                  id={product.id}\r\n                  product={product}\r\n                  remove={this.removeRecord}\r\n                />\r\n              ))}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <td colSpan=\"10\">\r\n                <div className=\"links\">\r\n                  <a href=\"#\">&laquo;</a>{\" \"}\r\n                  <a className=\"active\" href=\"#\">\r\n                    1\r\n                  </a>{\" \"}\r\n                  <a href=\"#\">2</a> <a href=\"#\">3</a> <a href=\"#\">4</a>{\" \"}\r\n                  <a href=\"#\">&raquo;</a>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n        {/* <EditForm /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainWindow from \"./components/MainWindow\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}