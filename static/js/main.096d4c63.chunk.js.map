{"version":3,"sources":["logo.svg","components/ProducInTable.js","components/MainWindow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProducInTable","this","props","product","productName","calories","fat","carbs","protein","console","log","type","Component","MainWindow","className","tableHead","map","th","products","p","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,4JC8B5BC,E,uKA3BH,IAAD,EACgDC,KAAKC,MAAMC,QAA1DC,EADD,EACCA,YAAaC,EADd,EACcA,SAAUC,EADxB,EACwBA,IAAKC,EAD7B,EAC6BA,MAAOC,EADpC,EACoCA,QAE3C,OADAC,QAAQC,IAAIN,GAEV,4BACE,4BAAKA,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BACE,2BAAOG,KAAK,cAEd,4BACE,yCAEF,4BACE,yCAEF,4BACE,gD,GArBkBC,aCEtBC,G,6KA2CF,OACE,yBAAKC,UAAU,cACb,yDACA,+BACE,+BACE,4BACGb,KAAKC,MAAMa,UAAUC,KAAI,SAAAC,GAAE,OAC1B,4BAAKA,QAIX,+BACGhB,KAAKC,MAAMgB,SAASF,KAAI,SAAAG,GAAC,OACxB,kBAAC,EAAD,CAAehB,QAASgB,c,GAxDbP,cAAnBC,EACGO,aAAe,CACpBL,UAAW,CACT,wBACA,WACA,SACA,WACA,aACA,UAEFG,SAAU,CACR,CACEd,YAAa,iBACbC,SAAU,IACVC,IAAK,EACLC,MAAO,GACPC,QAAS,GAEX,CACEJ,YAAa,qBACbC,SAAU,IACVC,IAAK,EACLC,MAAO,GACPC,QAAS,KAEX,CAAEJ,YAAa,SAAUC,SAAU,IAAKC,IAAK,GAAIC,MAAO,GAAIC,QAAS,GACrE,CACEJ,YAAa,UACbC,SAAU,IACVC,IAAK,IACLC,MAAO,GACPC,QAAS,KAEX,CACEJ,YAAa,cACbC,SAAU,IACVC,IAAK,EACLC,MAAO,GACPC,QAAS,KA2BFK,QCxDAQ,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.096d4c63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass ProducInTable extends Component {\r\n  render() {\r\n    const { productName, calories, fat, carbs, protein } = this.props.product;\r\n    console.log(productName);\r\n    return (\r\n      <tr>\r\n        <td>{productName}</td>\r\n        <td>{calories}</td>\r\n        <td>{fat}</td>\r\n        <td>{carbs}</td>\r\n        <td>{protein}</td>\r\n        <td>\r\n          <input type=\"checkbox\" />\r\n        </td>\r\n        <td>\r\n          <button>View</button>\r\n        </td>\r\n        <td>\r\n          <button>Edit</button>\r\n        </td>\r\n        <td>\r\n          <button>Delete</button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProducInTable;\r\n","import React, { Component } from \"react\";\r\nimport ProducInTable from \"./ProducInTable\";\r\nimport \"./MainWindow.css\";\r\n\r\nclass MainWindow extends Component {\r\n  static defaultProps = {\r\n    tableHead: [\r\n      \"Desert (100g serving)\",\r\n      \"Calories\",\r\n      \"Fat(g)\",\r\n      \"Carbs(g)\",\r\n      \"Protein(g)\",\r\n      \"Active\"\r\n    ],\r\n    products: [\r\n      {\r\n        productName: \"Frozen yoghurt\",\r\n        calories: 159,\r\n        fat: 6,\r\n        carbs: 24,\r\n        protein: 4\r\n      },\r\n      {\r\n        productName: \"Ice cream sandwich\",\r\n        calories: 237,\r\n        fat: 9,\r\n        carbs: 37,\r\n        protein: 4.3\r\n      },\r\n      { productName: \"Eclair\", calories: 262, fat: 16, carbs: 24, protein: 6 },\r\n      {\r\n        productName: \"Cupcake\",\r\n        calories: 305,\r\n        fat: 3.7,\r\n        carbs: 67,\r\n        protein: 4.3\r\n      },\r\n      {\r\n        productName: \"Marshmallow\",\r\n        calories: 318,\r\n        fat: 0,\r\n        carbs: 81,\r\n        protein: 2\r\n      }\r\n    ]\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"MainWindow\">\r\n        <h1>Warehouse Product's Table</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {this.props.tableHead.map(th => (\r\n                <th>{th}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.products.map(p => (\r\n              <ProducInTable product={p} />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MainWindow from \"./components/MainWindow\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}