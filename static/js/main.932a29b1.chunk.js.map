{"version":3,"sources":["components/ProducInTable.js","components/MainWindow.js","App.js","serviceWorker.js","index.js"],"names":["ProducInTable","props","state","handleRemove","bind","evt","this","remove","id","product","productName","calories","fat","carbs","protein","console","log","className","type","onClick","Component","MainWindow","products","readJason","removeRecord","newProduct","ProductData","map","push","active","uuid","setState","cuState","filter","tableHead","th","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAwDeA,G,wDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GACb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAJH,E,yDAONC,GACXC,KAAKL,MAAMM,OAAOD,KAAKL,MAAMO,M,+BAItB,MASHF,KAAKL,MAAMQ,QANbC,EAHK,EAGLA,YACAC,EAJK,EAILA,SACAC,EALK,EAKLA,IACAC,EANK,EAMLA,MACAC,EAPK,EAOLA,QAPK,EAQLN,GAGF,OADAO,QAAQC,IAAIN,GAGV,wBAAIO,UAAU,iBACZ,4BAAKP,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,GAEL,4BACE,2BAAOI,KAAK,cAEd,4BACE,4BAAQD,UAAU,QAAlB,SAEF,4BACE,4BAAQA,UAAU,QAAlB,SAEF,4BACE,4BAAQA,UAAU,SAASE,QAASb,KAAKH,cAAzC,gB,GA3CkBiB,c,+BCCtBC,E,kDAYJ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXoB,SAAU,EAAKC,aAEjB,EAAKC,aAAe,EAAKA,aAAapB,KAAlB,gBACpB,EAAKmB,UAAY,EAAKA,UAAUnB,KAAf,gBAPA,E,wDAWjB,IAAIqB,EAAa,GAIjB,OAHAC,EAAYJ,SAASK,KAAI,SAAAlB,GACvBgB,EAAWG,KAAX,eAAqBnB,EAArB,CAA8BoB,QAAQ,EAAOrB,GAAIsB,YAE5CL,I,mCAGIjB,GACXO,QAAQC,IAAI,UACZV,KAAKyB,UAAS,SAAAC,GAAO,MAAK,CACxBV,SAAUU,EAAQV,SAASW,QAAO,SAAAxB,GAAO,OAAIA,EAAQD,KAAOA,W,+BAItD,IAAD,OACP,OACE,yBAAKS,UAAU,cACb,yDAEA,+BAEE,+BACE,4BACGX,KAAKL,MAAMiC,UAAUP,KAAI,SAAAQ,GAAE,OAC1B,wBAAIC,IAAKN,OAASK,QAKxB,+BACG7B,KAAKJ,MAAMoB,SAASK,KAAI,SAAAlB,GAAO,OAC9B,kBAAC,EAAD,CACE2B,IAAK3B,EAAQD,GACbA,GAAIC,EAAQD,GACZC,QAASA,EACTF,OAAQ,EAAKiB,yB,GA1DJJ,aAAnBC,EAEGgB,aAAe,CACpBH,UAAW,CACT,wBACA,WACA,SACA,WACA,aACA,WA2DSb,QC7DAiB,MARf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCKcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.932a29b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./ProducInTable.css\";\r\n\r\nclass ProducInTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n  }\r\n  // click handler to remove element\r\n  handleRemove(evt) {\r\n    this.props.remove(this.props.id);\r\n    // this.props.remove(this.props.id);\r\n    // console.log(this.props.remove);\r\n  }\r\n  render() {\r\n    // getting props from parent element(MainWindow) and unwrapping\r\n    const {\r\n      productName,\r\n      calories,\r\n      fat,\r\n      carbs,\r\n      protein,\r\n      id\r\n    } = this.props.product;\r\n    console.log(productName);\r\n    return (\r\n      // passing props to html <td> elements\r\n      <tr className=\"ProducInTable\">\r\n        <td>{productName}</td>\r\n        <td>{calories}</td>\r\n        <td>{fat}</td>\r\n        <td>{carbs}</td>\r\n        <td>{protein}</td>\r\n\r\n        <td>\r\n          <input type=\"checkbox\" />\r\n        </td>\r\n        <td>\r\n          <button className=\"view\">View</button>\r\n        </td>\r\n        <td>\r\n          <button className=\"edit\">Edit</button>\r\n        </td>\r\n        <td>\r\n          <button className=\"delete\" onClick={this.handleRemove}>\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProducInTable;\r\n","import React, { Component } from \"react\";\r\nimport ProducInTable from \"./ProducInTable\";\r\nimport \"./MainWindow.css\";\r\nimport uuid from \"uuid/v4\";\r\nimport ProductData from \"./data/jsonData.json\";\r\nclass MainWindow extends Component {\r\n  // *******default props for table Head********\r\n  static defaultProps = {\r\n    tableHead: [\r\n      \"Desert (100g serving)\",\r\n      \"Calories\",\r\n      \"Fat(g)\",\r\n      \"Carbs(g)\",\r\n      \"Protein(g)\",\r\n      \"Active\"\r\n    ]\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    //*****Initial state from Json******** */\r\n    this.state = {\r\n      products: this.readJason()\r\n    };\r\n    this.removeRecord = this.removeRecord.bind(this);\r\n    this.readJason = this.readJason.bind(this);\r\n  }\r\n  //****function to add unique id to each product  and use this function to initiate state*/\r\n  readJason() {\r\n    let newProduct = [];\r\n    ProductData.products.map(product => {\r\n      newProduct.push({ ...product, active: false, id: uuid() });\r\n    });\r\n    return newProduct;\r\n  }\r\n  //********remove product**** by id */\r\n  removeRecord(id) {\r\n    console.log(\"remove\");\r\n    this.setState(cuState => ({\r\n      products: cuState.products.filter(product => product.id !== id)\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MainWindow\">\r\n        <h1>Warehouse Product's Table</h1>\r\n        {/********  genarating table*********** */}\r\n        <table>\r\n          {/* Table head */}\r\n          <thead>\r\n            <tr>\r\n              {this.props.tableHead.map(th => (\r\n                <th key={uuid()}>{th}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          {/* generating table body  */}\r\n          <tbody>\r\n            {this.state.products.map(product => (\r\n              <ProducInTable\r\n                key={product.id}\r\n                id={product.id}\r\n                product={product}\r\n                remove={this.removeRecord}\r\n              />\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainWindow from \"./components/MainWindow\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}