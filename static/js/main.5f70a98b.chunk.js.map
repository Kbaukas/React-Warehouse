{"version":3,"sources":["components/EditForm.js","components/ProducInTable.js","components/MainWindow.js","App.js","serviceWorker.js","index.js"],"names":["EditForm","props","product","productName","calories","fat","carbs","protein","id","state","hadleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","updateTable","close","prevProps","prevState","console","log","className","onSubmit","onChange","placeholder","type","Component","ProducInTable","editing","handleRemove","showEditForm","closeForm","remove","colSpan","update","onClick","MainWindow","products","readJason","removeRecord","newProduct","ProductData","map","push","active","uuidv4","localStorage","setItem","JSON","stringify","cuState","filter","newProducts","parse","getItem","editData","updatedProducts","tableHead","th","key","href","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f70a98b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./EditForm.css\";\r\n\r\nclass EditForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // unwraping props\r\n    const {\r\n      productName,\r\n      calories,\r\n      fat,\r\n      carbs,\r\n      protein,\r\n      id\r\n    } = this.props.product;\r\n    // defining default input values\r\n    this.state = {\r\n      productName: productName,\r\n      calories: calories,\r\n      fat: fat,\r\n      carbs: carbs,\r\n      protein: protein\r\n    };\r\n    this.hadleChange = this.hadleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  hadleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.updateTable(this.props.product.id, this.state);\r\n    this.props.close();\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"Form Update\");\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"EditForm\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            className=\"input_1\"\r\n            name=\"productName\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Product name\"\r\n            value={this.state.productName}\r\n          />\r\n\r\n          <input\r\n            className=\"input_2\"\r\n            type=\"number\"\r\n            name=\"calories\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Calories\"\r\n            value={this.state.calories}\r\n          />\r\n\r\n          <input\r\n            className=\"input_3\"\r\n            type=\"number\"\r\n            name=\"fat\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Fat(g)\"\r\n            value={this.state.fat}\r\n          />\r\n\r\n          <input\r\n            className=\"input_4\"\r\n            type=\"number\"\r\n            name=\"carbs\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Carbs(g)\"\r\n            value={this.state.carbs}\r\n          />\r\n\r\n          <input\r\n            className=\"input_5\"\r\n            type=\"number\"\r\n            name=\"protein\"\r\n            onChange={this.hadleChange}\r\n            placeholder=\"Protein(g)\"\r\n            value={this.state.protein}\r\n          />\r\n\r\n          <button type=\"submit\">Save</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./ProducInTable.css\";\r\nimport EditForm from \"./EditForm\";\r\n\r\nclass ProducInTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editing: false\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.showEditForm = this.showEditForm.bind(this);\r\n    this.closeForm = this.closeForm.bind(this);\r\n  }\r\n  // click handler to remove element\r\n  handleRemove(evt) {\r\n    this.props.remove(this.props.id);\r\n  }\r\n  showEditForm(evt) {\r\n    this.setState({\r\n      editing: !this.state.editing\r\n    });\r\n  }\r\n  closeForm() {\r\n    this.setState({\r\n      editing: !this.state.editing\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"Unmount\");\r\n  }\r\n  render() {\r\n    // getting props from parent element(MainWindow) and unwrapping\r\n    const {\r\n      productName,\r\n      calories,\r\n      fat,\r\n      carbs,\r\n      protein,\r\n      id\r\n    } = this.props.product;\r\n    console.log(productName);\r\n    return this.state.editing ? (\r\n      <tr className=\"ProducInTable\">\r\n        <td className=\"editable\" colSpan=\"9\">\r\n          <EditForm\r\n            close={this.closeForm}\r\n            updateTable={this.props.update}\r\n            product={this.props.product}\r\n          ></EditForm>\r\n        </td>\r\n      </tr>\r\n    ) : (\r\n      // passing props to html <td> elements\r\n      <tr className=\"ProducInTable\">\r\n        <td>{productName}</td>\r\n        <td>{calories}</td>\r\n        <td>{fat}</td>\r\n        <td>{carbs}</td>\r\n        <td>{protein}</td>\r\n\r\n        <td>\r\n          <input type=\"checkbox\" />\r\n        </td>\r\n        <td>\r\n          <button className=\"view\">View</button>\r\n        </td>\r\n        <td>\r\n          <button onClick={this.showEditForm} className=\"edit\">\r\n            Edit\r\n          </button>\r\n        </td>\r\n        <td>\r\n          <button className=\"delete\" onClick={this.handleRemove}>\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProducInTable;\r\n","import React, { Component } from \"react\";\r\nimport ProducInTable from \"./ProducInTable\";\r\nimport \"./MainWindow.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport ProductData from \"./data/jsonData.json\";\r\nimport EditForm from \"./EditForm\";\r\nclass MainWindow extends Component {\r\n  // *******default props for table Head********\r\n  static defaultProps = {\r\n    tableHead: [\r\n      \"Desert (100g serving)\",\r\n      \"Calories\",\r\n      \"Fat(g)\",\r\n      \"Carbs(g)\",\r\n      \"Protein(g)\",\r\n      \"Active\"\r\n    ]\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    //*****Initial state from Json******** */\r\n\r\n    this.state = {\r\n      products: this.readJason()\r\n    };\r\n    this.removeRecord = this.removeRecord.bind(this);\r\n    this.readJason = this.readJason.bind(this);\r\n    this.updateTable = this.updateTable.bind(this);\r\n  }\r\n  //****function to add unique id to each product  and use this function to initiate state*/\r\n\r\n  readJason() {\r\n    let newProduct = [];\r\n    ProductData.products.map(product => {\r\n      newProduct.push({ ...product, active: false, id: uuidv4() });\r\n    });\r\n    localStorage.setItem(\"products\", JSON.stringify(newProduct));\r\n    return newProduct;\r\n  }\r\n  //********remove product**** by id */\r\n  removeRecord(id) {\r\n    console.log(\"remove\");\r\n    this.setState(cuState => ({\r\n      products: cuState.products.filter(product => product.id !== id)\r\n    }));\r\n    let products = JSON.parse(localStorage.getItem(\"products\"));\r\n    let newProducts = products.filter(product => product.id !== id);\r\n\r\n    localStorage.setItem(\"products\", JSON.stringify(newProducts));\r\n  }\r\n\r\n  //***** */ updating table  ******\r\n  updateTable(id, editData) {\r\n    const { productName, calories, fat, carbs, protein } = editData;\r\n    const updatedProducts = this.state.products.map(product => {\r\n      if (product.id === id) {\r\n        return {\r\n          ...product,\r\n          productName: productName,\r\n          calories: calories,\r\n          fat: fat,\r\n          carbs: carbs,\r\n          protein: protein\r\n        };\r\n      }\r\n      return product;\r\n    });\r\n    this.setState({\r\n      products: updatedProducts\r\n    });\r\n    // *************************\r\n    localStorage.setItem(\"products\", JSON.stringify(updatedProducts));\r\n    let products = JSON.parse(localStorage.getItem(\"products\"));\r\n    console.log(products);\r\n    // ***************************\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MainWindow\">\r\n        <h1>Warehouse Product's Table</h1>\r\n        {/********  genarating table*********** */}\r\n        <table>\r\n          {/* Table head */}\r\n          <thead>\r\n            <tr>\r\n              {this.props.tableHead.map(th => (\r\n                <th key={uuidv4()}>{th}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          {/* generating table body  */}\r\n          <tbody>\r\n            {this.state.products.map(product => (\r\n              <ProducInTable\r\n                update={this.updateTable}\r\n                key={product.id}\r\n                id={product.id}\r\n                product={product}\r\n                remove={this.removeRecord}\r\n              />\r\n            ))}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <td colSpan=\"9\">\r\n                <div className=\"links\">\r\n                  <a href=\"#\">&laquo;</a>{\" \"}\r\n                  <a className=\"active\" href=\"#\">\r\n                    1\r\n                  </a>{\" \"}\r\n                  <a href=\"#\">2</a> <a href=\"#\">3</a> <a href=\"#\">4</a>{\" \"}\r\n                  <a href=\"#\">&raquo;</a>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n        {/* <EditForm /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainWindow;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainWindow from \"./components/MainWindow\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainWindow />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}